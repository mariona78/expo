{"version":3,"file":"AudioModule.types.js","sourceRoot":"","sources":["../src/AudioModule.types.ts"],"names":[],"mappings":"","sourcesContent":["import { PermissionResponse } from 'expo-modules-core';\nimport { NativeModule } from 'react-native';\n\nimport { AudioSource, PitchCorrectionQuality } from './Audio.types';\n\nexport type AudioStatus = {\n  id: number;\n  currentPosition: number;\n  status: string;\n  timeControlStatus: string;\n  reasonForWaitingToPlay: string;\n  isMuted: boolean;\n  totalDuration: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isLoaded: boolean;\n  rate: number;\n  shouldCorrectPitch: boolean;\n};\n\nexport type RecordingStatus = {\n  isFinished: boolean;\n  hasError: boolean;\n  error: string | null;\n};\n\nexport type AudioCategory =\n  | 'ambient'\n  | 'multiRoute'\n  | 'playAndRecord'\n  | 'playback'\n  | 'record'\n  | 'soloAmbient';\n\nexport interface AudioModule extends NativeModule {\n  setIsAudioActive(enabled: boolean): void;\n  setCategory(category: AudioCategory): void;\n\n  readonly AudioPlayer: AudioPlayer;\n}\n\nexport interface RecordingModule extends NativeModule {\n  requestRecordingPermissionsAsync(): Promise<RecordingPermissionResponse>;\n  getRecordingPermissionsAsync(): Promise<RecordingPermissionResponse>;\n\n  readonly AudioRecorder: AudioRecorder;\n}\n\nexport type RecordingPermissionResponse = PermissionResponse;\n\nexport interface AudioPlayer {\n  new (source: AudioSource | string | number | null): AudioPlayer;\n\n  id: number;\n  /**\n   * Boolean value whether the player is currently playing.\n   */\n  isPlaying: boolean;\n\n  /**\n   * Boolean value whether the player is currently muted.\n   */\n  isMuted: boolean;\n\n  /**\n   * Boolean value whether the player is currently looping.\n   */\n  isLooping: boolean;\n\n  /**\n   * Boolean value whether the player is finished loading.\n   */\n  isLoaded: boolean;\n\n  /**\n   * The current position through the audio item, in seconds.\n   */\n  currentPosition: number;\n\n  /**\n   * The total duration of the audio, in seconds.\n   */\n  totalDuration: number;\n\n  /**\n   * The current volume of the audio.\n   */\n  volume: number;\n\n  /**\n   * The current playback rate of the audio.\n   */\n  rate: number;\n\n  /**\n   * Boolean value whether the player should correct the pitch.\n   */\n  shouldCorrectPitch: boolean;\n\n  /**\n   * Resumes the player.\n   */\n  play(): void;\n\n  /**\n   * Pauses the player.\n   */\n  pause(): void;\n\n  /**\n   * Seeks the playback by the given number of seconds.\n   * @param seconds The number of seconds to seek by.\n   */\n  seekTo(seconds: number): Promise<void>;\n\n  /**\n   * Sets the current playback rate of the audio.\n   * @param rate The playback rate of the audio.\n   * @param pitchCorrectionQuality The quality of the pitch correction.\n   */\n  setRate(second: number, pitchCorrectionQuality?: PitchCorrectionQuality): void;\n}\n\nexport interface AudioRecorder {\n  new (url: string | null): AudioRecorder;\n\n  /**\n   * The current length of the recording, in seconds.\n   */\n  currentTime: number;\n\n  /**\n   * Boolean value indicating whether the recording is in progress.\n   */\n  isRecording: boolean;\n\n  /**\n   * Starts the recording.\n   */\n  record(): void;\n\n  /**\n   * Stop the recording.\n   */\n  stop(): void;\n\n  /**\n   * Starts the recording at the given time.\n   * @param seconds The time in seconds to start recording at.\n   */\n  startRecordingAtTime(seconds: number): void;\n\n  /**\n   * Stops the recording once the specified time has elapsed.\n   * @param seconds The time in seconds to stop recording at.\n   */\n  recordForDuration(seconds: number): void;\n}\n"]}