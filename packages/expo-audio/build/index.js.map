{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAG/B,OAAO,WAAW,MAAM,eAAe,CAAC;AAExC,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAEtD,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AAE9C,MAAM,UAAU,cAAc,CAAC,SAA+C,IAAI;IAChF,OAAO,MAAM,CAAC,IAAI,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAC5E,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAAsC;IAC5E,OAAO,OAAO,CAAC,WAAW,CAAc,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,OAAgB;IAC/C,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AACxC,CAAC","sourcesContent":["import { EventEmitter, Subscription } from 'expo-modules-core';\nimport { useRef } from 'react';\n\nimport { AudioSource } from './Audio.types';\nimport AudioModule from './AudioModule';\nimport { AudioPlayer, StatusEvent } from './AudioModule.types';\nimport { resolveSource } from './utils/resolveSource';\n\nconst emitter = new EventEmitter(AudioModule);\n\nexport function useAudioPlayer(source: AudioSource | string | number | null = null): AudioPlayer {\n  return useRef(new AudioModule.AudioPlayer(resolveSource(source))).current;\n}\n\nexport function addStatusUpdateListener(listener: (event: StatusEvent) => void): Subscription {\n  return emitter.addListener<StatusEvent>('onPlaybackStatusUpdate', listener);\n}\n\nexport function setIsAudioActive(enabled: boolean) {\n  AudioModule.setIsAudioActive(enabled);\n}\n\nexport { StatusEvent as ChangeEventPayload, AudioSource };\n"]}