{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAG3C,OAAO,WAAW,MAAM,eAAe,CAAC;AAQxC,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAEtD,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AACnD,MAAM,gBAAgB,GAAG,IAAI,YAAY,CAAC,eAAe,CAAC,CAAC;AAE3D,MAAM,UAAU,cAAc,CAC5B,SAA+C,IAAI,EACnD,cAA8C;IAE9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3F,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,uBAAuB,CAAC,CAAC,MAAM,EAAE,EAAE;YACtD,IAAI,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE;gBAC3B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpB,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEhB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,MAAqB,IAAI;IACxD,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAAsC;IAC5E,OAAO,YAAY,CAAC,WAAW,CAAc,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AACnF,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,QAA0C;IAE1C,OAAO,gBAAgB,CAAC,WAAW,CAAkB,yBAAyB,EAAE,QAAQ,CAAC,CAAC;AAC5F,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,OAAgB;IAC/C,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,QAAuB;IACtD,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import { EventEmitter, Subscription } from 'expo-modules-core';\nimport { useMemo, useEffect } from 'react';\n\nimport { AudioSource } from './Audio.types';\nimport AudioModule from './AudioModule';\nimport {\n  AudioCategory,\n  AudioPlayer,\n  AudioRecorder,\n  AudioStatus,\n  RecordingStatus,\n} from './AudioModule.types';\nimport RecordingModule from './RecordingModule';\nimport { resolveSource } from './utils/resolveSource';\n\nconst audioEmitter = new EventEmitter(AudioModule);\nconst recordingEmitter = new EventEmitter(RecordingModule);\n\nexport function useAudioPlayer(\n  source: AudioSource | string | number | null = null,\n  statusListener?: (status: AudioStatus) => void\n): AudioPlayer {\n  const player = useMemo(() => new AudioModule.AudioPlayer(resolveSource(source)), [source]);\n\n  useEffect(() => {\n    const subscription = addStatusUpdateListener((status) => {\n      if (status.id === player.id) {\n        console.log(status);\n        statusListener?.(status);\n      }\n    });\n    return () => subscription.remove();\n  }, [player.id]);\n\n  return player;\n}\n\nexport function useAudioRecorder(url: string | null = null): AudioRecorder {\n  return useMemo(() => new RecordingModule.AudioRecorder(url), [url]);\n}\n\nexport function addStatusUpdateListener(listener: (event: AudioStatus) => void): Subscription {\n  return audioEmitter.addListener<AudioStatus>('onPlaybackStatusUpdate', listener);\n}\n\nexport function addRecordingStatusListener(\n  listener: (event: RecordingStatus) => void\n): Subscription {\n  return recordingEmitter.addListener<RecordingStatus>('onRecordingStatusUpdate', listener);\n}\n\nexport function setIsAudioActive(enabled: boolean) {\n  AudioModule.setIsAudioActive(enabled);\n}\n\nexport function setAudioCategory(category: AudioCategory) {\n  AudioModule.setCategory(category);\n}\n\nexport { AudioStatus as ChangeEventPayload, AudioSource };\n"]}