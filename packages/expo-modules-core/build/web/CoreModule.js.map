{"version":3,"file":"CoreModule.js","sourceRoot":"","sources":["../../src/web/CoreModule.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  EventEmitter as EventEmitterType,\n  EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport uuid from '../uuid';\n\nclass EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n\n    const previousListenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.add(listener);\n\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    const listenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.clear();\n    if (listenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    const listeners = new Set(this.listeners?.get(eventName));\n    listeners.forEach((listener) => listener(...args));\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n\n  startObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n\n  stopObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototype?: object | undefined;\n  __expo_module_name__?: string;\n}\n\nclass SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    throw new Error('Method not implemented.');\n  }\n}\n\nglobalThis.expo = {\n  EventEmitter,\n  NativeModule,\n  SharedObject,\n  modules: {},\n  uuidv4: uuid.v4,\n  uuidv5: uuid.v5,\n  getViewConfig: () => {\n    throw new Error('Method not implemented.');\n  },\n  reloadAppAsync: async () => {\n    window.location.reload();\n  },\n};\n"]}